/*
 **
 **
 */

#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

volatile sig_atomic_t usr1Happened = 0;

int main(void) {
	void usr1_handler(int);

	struct sigaction sa;
	sa.sa_flags = 0;
	sa.sa_handler = &usr1_handler;
	sigemptyset(&sa.sa_mask);

	if (sigaction(SIGINT, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

	int numChildren;
	printf("Enter the number of children: ");
	scanf(" %d", &numChildren);

	int numFork = numChildren;
	int i;
	pid_t pids[10];

	printf("PID = %d: Parent running...\n", getppid());
	for (i = 0; i < numFork; ++i) {
		if ((pids[i] = fork()) < 0) {
			perror("Child(ren) failed, parent exiting.\n");
			abort();
		} else if (pids[i] == 0) {
			printf("PID = %d: Child running...\n", getpid());
			exit(0);
		}
	}

	int returnVal;
	pid_t pid;
	while (n > 0) {
		pid = wait(&returnVal);
		--n;
	}

	printf("PID = %d: Child(ren) finished, parent exiting.\n", getppid());
	exit(-1);
}

void usr1_handler(int signo) {
	usr1Happened = 1;
	printf("PID = %d: Child received USR1.\n", getpid());
	printf("PID = %d: Child exiting.\n", getpid());
}
