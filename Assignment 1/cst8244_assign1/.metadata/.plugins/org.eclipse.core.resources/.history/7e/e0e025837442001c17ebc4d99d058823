/******************
 * Filename: des_controller.c
 * Date: November 9, 2020
 * Course: CST8244 Real-Time Programming
 * Author: Andrew Palmer, Karim Tahan
 * Functions: int main(void)
 *
 * Sets states according to the input received from des_inputs.
 * When states are set, a message is sent to des_display to display a message showing the current state.
 *****************/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/neutrino.h>
#include <sys/netmgr.h>
#include <errno.h>
#include <sys/iofunc.h>
#include <sys/dispatch.h>
#include "./des.h"

int main(void) {
	State curr_state = READY_S;
	send_t msg_received;
	response_t msg_response;
	pid_t display_pid;
	int coid, rcvid;
	int msg_send;
/*
	if ((coid = name_open(NAME_ATTACH_DISPLAY, 0)) == -1) {
		perror("name_open failed.");
		return EXIT_FAILURE;
	}
*/
	int coid;
	if ((coid = ConnectAttach(NAME_ATTACH_DISPLAY, display_pid, 1, _NTO_SIDE_CHANNEL, 0)) == -1) {
		fprintf(stderr, "ERROR: Could not attach connection\n");
		perror(NULL);
		exit(EXIT_FAILURE);
	}

/*
	if ((attach = name_attach(NULL, NAME_ATTACH_CONTROLLER, 0)) == NULL) {
		return EXIT_FAILURE;
	}
*/

	printf("Controller PID: %d\n", getpid());

	while (1) {
		msg_send = 0;

		if ((rcvid = MsgReceive(chid, &msg_received, sizeof(send_t), NULL)) == -1) {
			printf("ERROR: Could not receive message from input.\n");
			return EXIT_FAILURE;
		}

		if (msg_received.input == EXIT_I) {
			curr_state = EXIT_S;
		}

		switch (curr_state) {
		case READY_S://READY_S
			if (msg_received.input == LEFT_SCAN_I) {//LEFT_SCAN_I
				curr_state = LEFT_SCAN_S;//LEFT_SCAN_S
				msg_send = 1;
			} else if (msg_received.input == RIGHT_SCAN_I) {//
				curr_state = RIGHT_SCAN_S;//
				msg_send = 1;
			}
			break;
		case LEFT_SCAN_S://
			if (msg_received.input == LEFT_UNLOCK_I) {//
				curr_state = IN_LEFT_UNLOCK_S;//
				msg_senddMsg = 1;
			}
			break;
		case RIGHT_SCAN_S://
			if (msg_received.input == RIGHT_UNLOCK_I) {//
				curr_state = OUT_RIGHT_UNLOCK_S;//
				msg_send = 1;
			}
			break;
		case IN_LEFT_UNLOCK_S://
			if (msg_received.input == LEFT_OPEN_I) {//
				curr_state = IN_LEFT_OPEN_S;//
				msg_send = 1;
			}
			break;
		case IN_LEFT_OPEN_S://
			if (msg_received.input == WEIGHT_SCAN_I) {//
				curr_state = IN_WEIGHT_SCAN_S;//
				msg_send = 1;
			}
			break;
		case IN_WEIGHT_SCAN_S://
			if (msg_received.input == LEFT_CLOSE_I) {//
				curr_state = IN_LEFT_CLOSE_S;//
				msg_send = 1;
			}
			break;
		case IN_LEFT_CLOSE_S://
			if (msg_received.input == LEFT_LOCK_I) {//
				curr_state = IN_LEFT_LOCK_S;//
				msg_send = 1;
			}
			break;
		case IN_LEFT_LOCK_S://
			if (msg_received.input == RIGHT_UNLOCK_I) {//
				curr_state = IN_RIGHT_UNLOCK_S;//
				msg_send = 1;
			}
			break;
		case IN_RIGHT_UNLOCK_S://
			if (msg_received.input == RIGHT_OPEN_I) {//
				curr_state = IN_RIGHT_OPEN_S;//
				msg_send = 1;
			}
			break;
		case IN_RIGHT_OPEN_S://
			if (msg_received.input == RIGHT_CLOSE_I) {//
				curr_state = IN_RIGHT_CLOSE_S;//
				msg_send = 1;
			}
			break;
		case IN_RIGHT_CLOSE_S://
			if (msg_received.input == RIGHT_LOCK_I) {//
				curr_state = READY_S;//
				msg_send = 1;
			}
			break;
		case OUT_RIGHT_UNLOCK_S://
			if (msg_received.input == RIGHT_OPEN_I) {//
				curr_state = OUT_RIGHT_OPEN_S;//
				msg_send = 1;
			}
			break;
		case OUT_RIGHT_OPEN_S://
			if (msg_received.input == WEIGHT_SCAN_I) {//
				curr_state = OUT_WEIGHT_SCAN_S;//
				msg_send = 1;
			}
			break;
		case OUT_WEIGHT_SCAN_S://
			if (msg_received.input == RIGHT_CLOSE_I) {//
				curr_state = OUT_RIGHT_CLOSE_S;//
				msg_send = 1;
			}
			break;
		case OUT_RIGHT_CLOSE_S://
			if (msg_received.input == RIGHT_LOCK_I) {//
				curr_state = OUT_RIGHT_LOCK_S;//
				msg_send = 1;
			}
			break;
		case LEAVE_RIGHTLOCK_STATE://
			if (msg_received.input == LEFT_UNLOCK_I) {//
				curr_state = LEAVE_LEFT_UNLOCK_STATE;//
				msg_send = 1;
			}
			break;
		case LEAVE_LEFT_UNLOCK_STATE://
			if (msg_received.input == LEFT_OPEN) {//
				curr_state = LEAVE_LEFT_OPEN_STATE;//
				msg_send = 1;
			}
			break;
		case LEAVE_LEFT_OPEN_STATE://
			if (msg_received.input == LEFT_CLOSE) {//
				curr_state = LEAVE_LEFT_CLOSE_STATE;//
				msg_send = 1;
			}
			break;
		case LEAVE_LEFT_CLOSE_STATE://
			if (msg_received.input == GUARD_LEFT_LOCK) {//
				curr_state = READY_STATE;//
				msg_send = 1;
			}
			break;
		case EXIT_STATE://
			MsgSend(coid, &msg_received, sizeof(send_t), &msg_response, sizeof(response_t));
			MsgReply(rcvid, EOK, &msg_response, sizeof(response_t));
/*
			name_close(coid);
			name_detach(attach, 0);
*/
			return EXIT_SUCCESS;
		}

		if (msg_send == 1) {
			if (MsgSend(coid, &msg_received, sizeof(send_t), msg_received, sizeof(response_t)) == -1) {
				fprintf(stderr, "ERROR: Could not send message.\n");
				perror(NULL);
				exit(EXIT_FAILURE);
			}
		}


		if (MsgReply(rcvid, EOK, &msg_response, sizeof(response_t)) == -1) {
			fprintf(stderr, "ERROR: Could not send reply message.\n");
			perror(NULL);
			exit(EXIT_FAILURE);
		}
/*
		if (curr_state == EXIT_S) {
			name_close(coid);
			name_detach(attach, 0);
			return EXIT_SUCCESS;
		}
*/
	}

}
