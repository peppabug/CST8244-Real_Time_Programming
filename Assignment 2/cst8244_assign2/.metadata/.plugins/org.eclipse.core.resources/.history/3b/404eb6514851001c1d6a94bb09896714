#include <stdlib.h>
#include <stdio.h>
#include <sys/iofunc.h>
#include <sys/dispatch.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <errno.h>

int const flags = 0;

int main(int argc, char *argv[]) {
	name_attach_t *attach;
	Metronome_t Metronome;
	int metro_coid;

	if (argc != 4) {
		fprintf(stderr, "ERROR: Must provide the 4 required arguments\n");
		perror(NULL);
		exit(EXIT_FAILURE);
	}

	return EXIT_SUCCESS;
}

void *metronome_thread() {
	if ((attach = name_attach(NULL, "metronome", flags)) == NULL) {
		fprintf(stderr, "ERROR: Could not attach connection to 'metronome'\n");
		perror(NULL);
		exit(EXIT_FAILURE);
	}
}

int io_read(resmgr_context_t *ctp, io_read_t *msg, RESMGR_OCB_T *ocb) {
	int nb;

	if (data == NULL)
		return 0;

	nb = strlen(data);

	//test to see if we have already sent the whole message.
	if (ocb->offset == nb)
		return 0;

	//We will return which ever is smaller the size of our data or the size of the buffer
	nb = min(nb, msg->i.nbytes);

	//Set the number of bytes we will return
	_IO_SET_READ_NBYTES(ctp, nb);

	//Copy data into reply buffer.
	SETIOV(ctp->iov, data, nb);

	//update offset into our data used to determine start position for next read.
	ocb->offset += nb;

	//If we are going to send any bytes update the access time for this resource.
	if (nb > 0)
		ocb->attr->flags |= IOFUNC_ATTR_ATIME;

	return(_RESMGR_NPARTS(1));
}

int io_write(resmgr_context_t *ctp, io_write_t *msg, RESMGR_OCB_T *ocb) {
	int nb = 0;

	if (msg->i.nbytes == ctp->info.msglen - (ctp->offset + sizeof(*msg))) {
		/* have all the data */
		char *buf;
		char *pause_msg;
		int i, pause_val;
		buf = (char *)(msg + 1);

		if (strstr(buf, "pause") != NULL) {
			for (i = 0; i < 2; i++) {
				pause_msg = strsep(&buf, " ");
			}

			pause_val = atoi(pause_msg);
			if (pause_val >= 1 && pause_val <= 9)
				MsgSendPulse(metro_coid, SchedGet(0, 0, NULL), PAUSE_PULSE_CODE, pause_val);
			else
				printf("ERROR: Integer must be between 1 and 9\n");
		}
		else if (strstr(buf, "quit") != NULL)
			MsgSendPulse(metro_coid, priority, QUIT_PULSE_CODE, pause_val);
		else if (strstr(buf, "set") != NULL)
			MsgSendPulse(metro_coid, priority, SET_PULSE_CODE, pause_val);
		else if (strstr(buf, "start") != NULL)
			MsgSendPulse(metro_coid, priority, START_PULSE_CODE, pause_val);
		else if (strstr(buf, "stop") != NULL)
			MsgSendPulse(metro_coid, priority, STOP_PULSE_CODE, pause_val);
		else
			strcpy(data, buf);
		nb = msg->i.nbytes;
	}
	_IO_SET_WRITE_NBYTES (ctp, nb);

	if (msg->i.nbytes > 0)
		ocb->attr->flags |= IOFUNC_ATTR_MTIME | IOFUNC_ATTR_CTIME;

	return (_RESMGR_NPARTS (0));
}

