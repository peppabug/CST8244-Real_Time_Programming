struct ioattr_t;
#define IOFUNC_ATTR_T struct ioattr_t
struct metro_ocb;
#define IOFUNC_OCB_T struct metro_ocb

#include <sys/iofunc.h>
#include <sys/dispatch.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <unistd.h>
#include <pthread.h>
#include <sched.h>
#include <math.h>
#include <sys/types.h>
#include <sys/netmgr.h>
#include <sys/neutrino.h>

#define METRO_PULSE_CODE _PULSE_CODE_MINAVAIL
#define PAUSE_PULSE_CODE (METRO_PULSE_CODE + 1)
#define START_PULSE_CODE (PAUSE_PULSE_CODE + 1)
#define STOP_PULSE_CODE  (START_PULSE_CODE + 1)
#define QUIT_PULSE_CODE  (STOP_PULSE_CODE  + 1)
#define SET_PULSE_CODE   (QUIT_PULSE_CODE  + 1)
#define METRO_ATTACH     "metronome"

typedef union {
	struct _pulse pulse;
	char msg[255];
} my_message_t;

struct DataTableRow {
	int time_sig_top;
	int time_sig_btm;
	int num_intervals;
	char pattern[32];
};

struct DataTableRow t[] = {
		{ 2,  4,  4,   "|1&2&"         },
		{ 3,  4,  6,   "|1&2&3&"       },
		{ 4,  4,  8,   "|1&2&3&4&"     },
		{ 5,  4,  10,  "|1&2&3&4-5-"   },
		{ 3,  8,  6,   "|1-2-3-"       },
		{ 6,  8,  6,   "|1&a2&a"       },
		{ 9,  8,  9,   "|1&a2&a3&a"    },
		{ 12, 8,  12,  "|1&a2&a3&a4&a" }
};

struct Timer_Properties {
	int status;
	double beats_per_sec;
	double measure;
	double interval;
	double nano_sec;
} typedef timer_props_t;

struct Metronome_Properties {
	int beats_per_min;
	int time_sig_top;
	int time_sig_btm;
} typedef metro_props_t;

struct Metronome {
	metro_props_t m_props;
	timer_props_t t_props;
} typedef Metronome_t;

typedef struct ioattr_t {
	iofunc_attr_t attr;
	int device;
} ioattr_t;

typedef struct metro_ocb {
	iofunc_ocb_t ocb;
	char buffer[50];
} metro_ocb_t;

name_attach_t *attach;
Metronome_t Metronome;
int server_coid;
char data[255];

int io_read(resmgr_context_t *ctp, io_read_t *msg, metro_ocb_t *mocb) {
	int index, nb;

	if (data == NULL) return 0;

	for (int i = 0; i < 8; i++) {
		if (t[i].time_sig_btm == Metronome.m_props.time_sig_btm && t[i].time_sig_top == Metronome.m_props.time_sig_top)
			index = i;
	}

	sprintf(data,
			"[metronome: %d beats/min, time signature: %d/%d, secs-per-interval: %.2f, nanoSecs: %.0lf]\n",
			Metronome.m_props.beats_per_min,
			t[index].time_sig_top,
			t[index].time_sig_btm,
			Metronome.t_props.interval,
			Metronome.t_props.nano_sec);

	nb = strlen(data);

	if (mocb->ocb.offset == nb) return 0;

	nb = min(nb, msg->i.nbytes);
	_IO_SET_READ_NBYTES(ctp, nb);
	SETIOV(ctp->iov, data, nb);
	mocb->ocb.offset += nb;

	if (nb > 0) mocb->ocb.flags |= IOFUNC_ATTR_ATIME;

	return (_RESMGR_NPARTS(1));
}

int io_write(resmgr_context_t *ctp, io_write_t *msg, metro_ocb_t *mocb) {
	int nb = 0;

	if (msg->i.nbytes == ctp->info.msglen - (ctp->offset + sizeof(*msg))) {
		char *buf;
		char *pause_msg;
		char *set_msg;
		int i, small_integer = 0;
		buf = (char *) (msg + 1);

		if (strstr(buf, "pause") != NULL) {
			for (i = 0; i < 2; i++)
				pause_msg = strsep(&buf, " ");
			small_integer = atoi(pause_msg);
			if (small_integer >= 1 && small_integer <= 9)
				MsgSendPulse(server_coid, SchedGet(0, 0, NULL), PAUSE_PULSE_CODE, small_integer);
			else printf("Integer is not between 1 and 9.\n");
		}
		else if (strstr(buf, "quit") != NULL)
			MsgSendPulse(server_coid, SchedGet(0, 0, NULL), QUIT_PULSE_CODE, small_integer);
		else if (strstr(buf, "start") != NULL)
			MsgSendPulse(server_coid, SchedGet(0, 0, NULL), START_PULSE_CODE, small_integer);
		else if (strstr(buf, "stop") != NULL)
			MsgSendPulse(server_coid, SchedGet(0, 0, NULL), STOP_PULSE_CODE, small_integer);
		else if (strstr(buf, "set") != NULL) {
			for (i = 0; i < 4; i++) {
				set_msg = strsep(&buf, " ");
				if (i == 1) Metronome.m_props.beats_per_min = atoi(set_msg);
				else if (i == 2) Metronome.m_props.time_sig_top = atoi(set_msg);
				else if (i == 3) Metronome.m_props.time_sig_btm = atoi(set_msg);
			}
			/* Send Set pulse, value doesn't matter since new values are already set */
			MsgSendPulse(server_coid, SchedGet(0, 0, NULL), SET_PULSE_CODE, small_integer);
		}
		else printf("\nInvalid Command: %s\n", strsep(&buf, "\n"));
		nb = msg->i.nbytes;
	}
	_IO_SET_WRITE_NBYTES(ctp, nb);

	if (msg->i.nbytes > 0) mocb->ocb.flags |= IOFUNC_ATTR_MTIME | IOFUNC_ATTR_CTIME;
	return (_RESMGR_NPARTS(0));
}

int io_open(resmgr_context_t *ctp, io_open_t *msg, RESMGR_HANDLE_T *handle, void *extra) {
	if ((server_coid = name_open(METRO_ATTACH, 0)) == -1) {
		perror("ERROR: io_open() name_open failure\n ");
		return EXIT_FAILURE;
	}
	return (iofunc_open_default(ctp, msg, &handle->attr, extra));
}

void *metronome_thread(void *ta) {
	struct itimerspec itime;
	struct sigevent event;
	my_message_t msg;
	timer_t timer_id;
	int index = 0;
	int rcvid;
	char *tp;

	if ((attach = name_attach(NULL, METRO_ATTACH, 0)) == NULL) {
		printf("Error - name_attach - ./metronome.c \n");
		exit(EXIT_FAILURE);
	}

	event.sigev_notify = SIGEV_PULSE;
	event.sigev_coid = ConnectAttach(ND_LOCAL_NODE, 0, attach->chid, _NTO_SIDE_CHANNEL, 0);
	event.sigev_priority = SIGEV_PULSE_PRIO_INHERIT;
	event.sigev_code = METRO_PULSE_CODE;
	timer_create(CLOCK_REALTIME, &event, &timer_id);

	for (int i = 0; i < 8; i++) {
		if (t[i].time_sig_btm == Metronome.m_props.time_sig_btm && t[i].time_sig_top == Metronome.m_props.time_sig_top)
			index = i;
	}

	Metronome.t_props.beats_per_sec = (double) 60 / Metronome.m_props.beats_per_min;
	Metronome.t_props.measure = Metronome.t_props.beats_per_sec * 2;
	Metronome.t_props.interval = Metronome.t_props.measure / Metronome.m_props.time_sig_btm;
	Metronome.t_props.nano_sec = (Metronome.t_props.interval - (int) Metronome.t_props.interval) * 1e+9;

	itime.it_value.tv_sec = 1;
	itime.it_value.tv_nsec = 0;
	itime.it_interval.tv_sec = Metronome.t_props.interval;
	itime.it_interval.tv_nsec = Metronome.t_props.nano_sec;
	timer_settime(timer_id, 0, &itime, NULL);
	tp = t[index].pattern;

	for (;;) {
		rcvid = MsgReceive(attach->chid, &msg, sizeof(msg), NULL);
		if (rcvid == 0) {
			switch (msg.pulse.code) {
			case METRO_PULSE_CODE:
				if (*tp == '|') {
					printf("%.2s", tp);
					tp = (tp + 2);
				}
				else if (*tp == '\0') {
					printf("\n");
					tp = t[index].pattern;
				}
				else printf("%c", *tp++);
				break;
			case PAUSE_PULSE_CODE:
				if (Metronome.t_props.status == 0) {
					itime.it_value.tv_sec = msg.pulse.value.sival_int;
					timer_settime(timer_id, 0, &itime, NULL);
				}
				break;
			case QUIT_PULSE_CODE:
				timer_delete(timer_id);
				name_detach(attach, 0);
				name_close(server_coid);
				exit(EXIT_SUCCESS);
			case SET_PULSE_CODE:
				for (int i = 0; i < 8; i++) {
					if (t[i].time_sig_btm == Metronome.m_props.time_sig_btm && t[i].time_sig_top == Metronome.m_props.time_sig_top)
						index = i;
				}

				tp = t[index].pattern;
				Metronome.t_props.beats_per_sec = (double) 60 / Metronome.m_props.beats_per_min;
				Metronome.t_props.measure = Metronome.t_props.beats_per_sec * 2;
				Metronome.t_props.interval = Metronome.t_props.measure / Metronome.m_props.time_sig_btm;
				Metronome.t_props.nano_sec = (Metronome.t_props.interval - (int) Metronome.t_props.interval) * 1e+9;

				itime.it_value.tv_sec = 1;
				itime.it_value.tv_nsec = 0;
				itime.it_interval.tv_sec = Metronome.t_props.interval;
				itime.it_interval.tv_nsec = Metronome.t_props.nano_sec;
				timer_settime(timer_id, 0, &itime, NULL);
				printf("\n");
				break;
			case START_PULSE_CODE:
				if (Metronome.t_props.status == 1) {
					itime.it_value.tv_sec = 1;
					itime.it_value.tv_nsec = 0;
					itime.it_interval.tv_sec = Metronome.t_props.interval;
					itime.it_interval.tv_nsec = Metronome.t_props.nano_sec;
					timer_settime(timer_id, 0, &itime, NULL);
					Metronome.t_props.status = 0;
					timer_settime(timer_id, 0, &itime, NULL);
				}
				break;
			case STOP_PULSE_CODE:
				if (Metronome.t_props.status == 0) {
					itime.it_value.tv_sec = 0;
					timer_settime(timer_id, 0, &itime, NULL);
				}
				break;
			}
		}
		fflush(stdout);
	}
	return NULL;
}

int main(int argc, char *argv[]) {
	resmgr_connect_funcs_t conn_funcs;
	pthread_attr_t thread_attrib;
	resmgr_io_funcs_t io_funcs;
	dispatch_context_t *ctp;
	metro_ocb_t *mocb;
	dispatch_t *dpp;
	ioattr_t ioattr;
	int id;

	if (argc != 4) {
		printf("ERROR: You must provide all required arguments\n");
		exit(EXIT_FAILURE);
	}

	mocb = calloc(1, sizeof(metro_ocb_t));
	mocb->ocb.offset = 0;
	iofunc_funcs_t metro_ocb_funcs = { _IOFUNC_NFUNCS, mocb, mocb };

	Metronome.m_props.beats_per_min = atoi(argv[1]);
	Metronome.m_props.time_sig_top = atoi(argv[2]);
	Metronome.m_props.time_sig_btm = atoi(argv[3]);

	if ((dpp = dispatch_create()) == NULL) {
		fprintf(stderr, "%s: Unable to allocate dispatch context\n", argv[0]);
		return (EXIT_FAILURE);
	}

	iofunc_func_init(_RESMGR_CONNECT_NFUNCS, &conn_funcs, _RESMGR_IO_NFUNCS, &io_funcs);
	conn_funcs.open = io_open;
	io_funcs.read = io_read;
	io_funcs.write = io_write;
	iofunc_attr_init(&ioattr, S_IFCHR | 0666, NULL, NULL);
	id = resmgr_attach(dpp, NULL, "/dev/local/metronome", _FTYPE_ANY, 0, &conn_funcs, &io_funcs, &ioattr);
	ctp = dispatch_context_alloc(dpp);
	pthread_attr_init(&thread_attrib);
	pthread_create(NULL, &thread_attrib, &metronome_thread, &Metronome);
	while (1) {
		if ((ctp = dispatch_block(ctp))) dispatch_handler(ctp);
		else printf("ERROR\n");
	}

	pthread_attr_destroy(&thread_attrib);
	name_detach(attach, 0);
	name_close(server_coid);
	return EXIT_SUCCESS;
}
